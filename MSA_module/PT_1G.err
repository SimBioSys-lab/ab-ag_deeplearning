Traceback (most recent call last):
  File "/work/SimBioSys/Xing/ab-ag_deeplearning/MSA_module/PT_train.py", line 71, in <module>
    output_seq = model(seq)  # Output shape: [batch_size, seq_len, num_classes]
                 ^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/work/SimBioSys/Xing/ab-ag_deeplearning/MSA_module/Models.py", line 274, in forward
    output = self.self_attention(output)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/work/SimBioSys/Xing/ab-ag_deeplearning/MSA_module/Models.py", line 114, in forward
    x = self.row_attn(x, mask=mask, edges=pairwise_repr) + x
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/work/SimBioSys/Xing/ab-ag_deeplearning/MSA_module/Models.py", line 103, in forward
    out = self.attn(x, mask=mask,  tied = tied)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/work/SimBioSys/Xing/ab-ag_deeplearning/MSA_module/Models.py", line 44, in forward
    dots = einsum("b h i d, b h j d -> b h i j", q, k)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xing.liu/miniconda3/envs/msa_attention/lib/python3.12/site-packages/torch/functional.py", line 386, in einsum
    return _VF.einsum(equation, operands)  # type: ignore[attr-defined]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 34.33 GiB. GPU 0 has a total capacity of 31.74 GiB of which 19.41 GiB is free. Including non-PyTorch memory, this process has 12.32 GiB memory in use. Of the allocated memory 11.94 GiB is allocated by PyTorch, and 16.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
